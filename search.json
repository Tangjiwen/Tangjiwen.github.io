[{"path":"/2024/05/08/MYSQL中级进阶文档/","content":"一、表关系a.一对一 b.一对多(外键在学生表) 1 c.多对多 二、DQL123数据查询语言\tSELECT 作用是把数据库表里面的数据查询出来 1、基本查询12345678910111213141516171819202122232425create table employee(\tid int primary key auto_increment,\tname VARCHAR(100),\tage int,\tsalary int);insert into employee values(1,&#x27;赵日天&#x27;,23,6000);insert into employee values(2,&#x27;李杀神&#x27;,24,4500);insert into employee values(3,&#x27;王诛魔&#x27;,20,5000);insert into employee values(4,&#x27;刘斩仙&#x27;,30,30000);insert into employee values(5,&#x27;&#x27;,29,15000);insert into employee values(6,null,35,40000);insert into employee values(7,&#x27;刘斩仙&#x27;,30,30000);-- 13查询前4条数据select * from employee limit 4;-- 14查询出第二条到第五条数据select * from employee limit 1,4;-- 15查询id为1或者3的的数据(两种方式)select * from employee where id=1 or id=3;select * from employee where id in(1,3); 2、分页123456789101112131415-- 分页-- limit后面跟一个值--表示从第一行开始查,一次查n行select * from employee limit 4;-- limit后面跟两个值--表示从第m+1行开始查,一次查询n行select * from employee limit m,n;select * from employee limit 0,3;-- 页码pageNum,每页显示的数量pageSize表示-- pageNum = 1-- pageSize= 2select * from employee limit 4,2;select * from employee limit (pageNum-1)*pageSize,pageSize; 3、去重DISTINCT 123-- 去重\t-- 去重关键字DISTINCT必须放在查询语句的第一列select distinct name,age,salary from employee; 二、进阶查询1、排序12345678910111213141516create table salary(\tid int PRIMARY KEY auto_increment,\tusername VARCHAR(20),\tsal int);insert into salary(username,sal) VALUES(&quot;赵日天&quot;,5000);insert into salary(username,sal) VALUES(&quot;刘斩仙&quot;,1000);insert into salary(username,sal) VALUES(&quot;王诛魔&quot;,9000);insert into salary(username,sal) VALUES(&quot;李杀神&quot;,null);-- 排序-- 排序 order by ... asc升序（默认） desc降序\t-- 升序-以工资升序排序 -- asc可以省略select * from salary order by sal asc;\t-- 降序-以工资降序排序select * from salary order by sal desc; 2、聚合函数1234567891011121314151617181920212223242526272829-- 函数-- 聚合函数\t#作用：对数据库里面的数据做算术运算\t#常用的聚合函数 -- avg count max min sumcreate table salary(\tid int PRIMARY KEY auto_increment,\tusername VARCHAR(20),\tsal int);insert into salary(username,sal) VALUES(&quot;赵日天&quot;,5000);insert into salary(username,sal) VALUES(&quot;刘斩仙&quot;,1000);insert into salary(username,sal) VALUES(&quot;王诛魔&quot;,9000);insert into salary(username,sal) VALUES(&quot;李杀神&quot;,null);select * from salary;-- avg 求所有工资的平均值 排除了值为null的情况select avg(sal) from salary;-- count 统计表里面总共有多少行数据select count(*) from salary;-- count 统计表里面总共有多少行数据,但是要剔除数据为null情况select count(sal) from salary;-- max 求工资的最大值select max(sal) from salary;-- min 求工资最小值select min(sal) from salary;-- sum 计算所有工资的和select sum(sal) from salary; 3、分组12345678910111213141516171819202122232425262728-- 分组group by... HAVING ...create table mytable( id int primary key, type varchar(100), n int);insert into mytable values(1,&#x27;a&#x27;,5);insert into mytable values(2,&#x27;b&#x27;,4);insert into mytable values(3,&#x27;c&#x27;,6);insert into mytable values(4,&#x27;a&#x27;,1);insert into mytable values(5,&#x27;b&#x27;,3);insert into mytable values(6,&#x27;c&#x27;,5);insert into mytable values(7,&#x27;b&#x27;,5);insert into mytable values(8,&#x27;c&#x27;,2);-- 分组的语法通常需要跟聚合函数一起用-- 统计每组有多少行select type,count(*) from mytable group by type;-- 统计表里面总共有多少个a,多少个b,多少个cselect type,sum(n) from mytable group by type;-- 得到数量大于10的类型select type,sum(n) as total from mytable group by type having total&gt;10;-- 分组之后的筛选必须使用having 三、高级查询-多表查询1.关联查询123456789101112131415161718192021222324252627282930313233343536373839404142434445-- 商品类型表create table typeinfo(\tid int PRIMARY KEY auto_increment,\ttypename VARCHAR(100));insert into typeinfo(typename) VALUES(&#x27;大米&#x27;);insert into typeinfo(typename) VALUES(&#x27;手机&#x27;);insert into typeinfo(typename) VALUES(&#x27;家电&#x27;);insert into typeinfo(typename) VALUES(&#x27;粮油&#x27;),(&#x27;日用品&#x27;),(&#x27;水果&#x27;),(&#x27;服饰&#x27;);-- 商品信息表create table productinfo(\tid int PRIMARY KEY auto_increment,\tpro_name VARCHAR(100),\ttypeid int,\tnum int,\tprice DOUBLE(8,2),\t-- 外键关联\tFOREIGN key (typeid) REFERENCES typeinfo(id));insert into productinfo(pro_name,typeid,num,price) VALUES(&#x27;东北大米&#x27;,1,1000,56.99);insert into productinfo(pro_name,typeid,num,price) VALUES(&#x27;oppo手机&#x27;,2,1000,3999.99);insert into productinfo(pro_name,typeid,num,price) VALUES(&#x27;格力空调&#x27;,3,1000,9999.99);insert into productinfo(pro_name,typeid,num,price) VALUES(&#x27;美的空调&#x27;,3,1000,9999.99);-- 关联查询(查询两张表相关联的数据)\t-- 内连接 -- 语法 select * from 表1,表2 where 表1.外键=表2.主键\tselect * from typeinfo,productinfo where typeinfo.id=productinfo.typeid; -- 语法 select * from 表1 inner join 表2 on 表1.外键=表2.主键\tselect * from typeinfo inner join productinfo on typeinfo.id=productinfo.typeid; -- 外连接 -- 左外连接(以左表为主表,会把左表数据全部查询出来) -- 语法 select * from 表1 left join 表2 on 表1.主键=表2.外键 select * from typeinfo left join productinfo on typeinfo.id=productinfo.typeid; select * from typeinfo left outer join productinfo on typeinfo.id=productinfo.typeid; -- 右外连接(以右表为主表,会把右表数据全部查询出来) -- 语法 select * from 表1 right join 表2 on 表1.主键=表2.外键 select * from productinfo right join typeinfo on typeinfo.id=productinfo.typeid; select * from productinfo right outer join typeinfo on typeinfo.id=productinfo.typeid; 2.关联查询练习1234567891011121314151617181920-- 1.查询出每个学生所在的班级，查询的结果为学生姓名和班级名称（分别使用内连接和外连接实现）select s_name,c_name from student,class where student.class_id = class.c_id;-- 2.查询出没有被学生学习的课程，查询的结果为课程名称select c_name from course left join score on course.c_id = score.course_id where s_id is null;-- 3.查询出所有被选学了的课程，查询的结果为课程名称select distinct c_name from course left join score on course.c_id = score.course_id where s_id is not null;-- 4.查询出每个学生所学的课程以及成绩select s_name,c_name,number from student,course,score where score.student_id=student.s_id and score.course_id=course.c_id;-- 5、 查询出选择了1号课程的学生姓名及成绩，并按成绩降序排列select s_name,c_name,number from student,course,score where score.student_id=student.s_id and score.course_id=course.c_id and course_id=1 order by number desc;-- 6、 查询出参加选课的学生及选课信息，未参加选课的人员不需要显示select s_name,c_name from student,course,score where score.student_id=student.s_id and score.course_id=course.c_id;-- 7、 查询出所有学生的选课情况，未参加选课的人员需要显示select s_name,c_name from student left join score on student.s_id=score.student_id left join course on score.course_id=course.c_id;-- 8、 查询出未参加选课的学生信息，查询结果为学生姓名select s_name from student left join score on score.student_id=student.s_id where score.s_id is null;-- 9、 查询出学号为‘1’的选修课程的总学分数select sum(number) from score where student_id=1;-- 10、 查询出2号课程取得最高分数的学生姓名及分数select s_name,number from student,score where student.s_id=score.student_id and course_id=2 order by number desc limit 1; 3.子查询12345子查询在WHERE语句中的一般用法： SELECT … FROM 表1 WHERE 字段1 &gt;(子查询) 外面的查询称为父查询，括号中嵌入的查询称为子查询 UPDATE、INSERT、DELETE一起使用，语法类似于SELECT语句 将子查询和比较运算符联合使用，必须保证子查询返回的值不能多于一个 12345查询年龄高于平均年龄的学生信息-- a.查出学生的平均年龄select avg(age) from student;-- b.查询年龄高于平均年龄的学生信息select * from student where age&gt;(select avg(age) from student); 4.子查询练习1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253-- 学生表create table stu (\tsid int primary key,\tsname varchar(50));-- 课程表create table course(\tcid int primary key,\tcname varchar(50));-- 分数表create table sc(\tscid int primary key auto_increment,\tsid int,\tcid int,\tscore int);insert into stu values(1,&quot;张三&quot;);insert into stu values(2,&quot;李四&quot;);insert into stu values(3,&quot;王五&quot;);insert into course values(1,&quot;语文&quot;);insert into course values(2,&quot;数学&quot;);insert into course values(3,&quot;英语&quot;);insert into sc(sid,cid,score) values(1,1,78);insert into sc(sid,cid,score) values(2,2,45);insert into sc(sid,cid,score) values(3,1,59);insert into sc(sid,cid,score) values(1,3,83);insert into sc(sid,cid,score) values(3,2,42);insert into sc(sid,cid,score) values(2,3,54);insert into sc(sid,cid,score) values(1,2,69);insert into sc(sid,cid,score) values(2,1,72);insert into sc(sid,cid,score) values(3,3,34);-- 1.获取到语文及格的每个学员的名字 -- a.查询到语文的主键\tselect cid from course where cname=&#x27;语文&#x27;;\t-- b.查询成绩表语文及格的学员id\tselect sid from sc where cid=(select cid from course where cname=&#x27;语文&#x27;) and score&gt;=60;\t-- c.查学生表\tselect * from stu where sid in(select sid from sc where cid=(select cid from course where cname=&#x27;语文&#x27;) and score&gt;=60);-- 2.获取平均成绩大于60的每个学生名字\t-- a.查平均成绩大于60分的学生id\tselect sid from sc group by sid having avg(score)&gt;60; -- b.查学生表\tselect sname from stu where sid in(select sid from sc group by sid having avg(score)&gt;60);-- 3.获取及格科目大于1个的每个学员的名字\t-- a.获取及格科目大于1的学生id\tselect sid from sc where score&gt;=60 group by sid having count(*)&gt;1;\t-- b.查询学生表\tselect sname from stu where sid in(select sid from sc where score&gt;=60 group by sid having count(*)&gt;1); 5.组合查询12UNION和UNION ALL的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。前提条件:两张表列的数量要一致 12345678910111213141516171819202122232425create table student1(\ts_id varchar(10) primary key,\tname varchar(20));insert into student1 values(&#x27;001&#x27;,&#x27;范娜&#x27;),(&#x27;002&#x27;,&#x27;张三星&#x27;),(&#x27;003&#x27;,&#x27;李四海&#x27;),(&#x27;004&#x27;,&#x27;刘德华&#x27;),(&#x27;005&#x27;,&#x27;周润发&#x27;);create table student2(\ts_id varchar(10) primary key,\tname varchar(20));insert into student2 values(&#x27;001&#x27;,&#x27;范娜&#x27;),(&#x27;006&#x27;,&#x27;张学友&#x27;),(&#x27;007&#x27;,&#x27;喜羊羊&#x27;),(&#x27;008&#x27;,&#x27;灰太狼&#x27;),(&#x27;005&#x27;,&#x27;阿童木&#x27;);-- union(会去除重复数据)select * from student1unionselect * from student2;-- union allselect * from student1union allselect * from student2;"},{"path":"/2024/05/08/MYSQL基础入门文档/","content":"一、数据库简介1、简介数据库:存储数据库的仓库数据库由一张一张的表组成 数据存储在表中 123456789101112131415161718一、数据库简介 关系型数据库 关系-对象模型 把现实世界看作由实体和关系组成 实体的特征称为属性,我们可以使用属性来描述一个具体的实体 在关系型数据库中,使用二维表来描述实体以及实体之间的关系 数据库管理系统（DBMS） 所有数据库软件的统称 关系型数据库管理系统（RDBMS） 所有关系型数据库的统称 关系型数据库和非关系型数据库的区别 关系型数据库使用二维表来存储数据库 非关系型数控不使用二维表存储数据二、SQL\t结构化查询语句,是一种用来管理关系型数据库,并与数据库中的数据进行通信的计算机语言三、SQL方言\t不同的关系型数据库之间,SQL语法有差异,这个差异就是SQL方言 2、主流数据库介绍1234567关系型 :用于大型系统开发，海量数据存储\tMySql:属于Oracle公司,免费开源,市面上使用比较多的版本是5.7和8\tOracle:属于Oracle公司\tSQLServer:属于微软\tSQLLit非关系型：用作服务器缓存\tRedis MongoDB hBase 二、MYSQL数据库简介1234MySQL是一个关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，提高速度和灵活性MySQL是最好的、最流行的RDBMS(Relationa Database Management System，关系型数据库管理系统)之一MySQL体积小、速度快、成本低、代码开源，一般中小型网站的开发都选择 MySQL 作为网站数据库 三、数据库的安装1234567下载MySQL软件（版本：5.5、5.6、5.7、8.0）本地地址Q:\\_04网络共享资料（新）\\固定使用\\技术部资料\\软件资料\\software\\mysql配置初始化的my.ini文件初始化MySQL安装MySQL服务和启动MySQL服务连接MySQL和修改密码 123456可视化图形界面的安装Navicat是一套快速、可靠并价格相宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。Navicat是以直觉化的图形用户界面而建的，可以以安全、简单的方式创建、组织、访问并共用信息推荐使用Navicat Premium 64位，免安装破解版 四、SQL语句分类1234DDL(数据定义语言):数据库结构和表结构的增删改查DML(数据操作语言):表数据的增删改\t(*)DQL(数据查询语言):表数据的查询 (**)DCL(数据控制语言):数据库的权限控制 五、DDL1234567数据库结构和表结构的增删改查DDL对应的关键字如下\tcreate\tdrop\talter\tshow 1、命令行操作数据库123456789101112sql语句写完后以;结尾1.查看数据库服务器中所有的数据库show databases;2.创建数据库create database 数据库名称;3.删除数据库drop database 数据库名称;4.使用数据库use 数据库名称;5.查看数据库中的表show tables; 2、客户端连接mysql服务器Navicat Sqlyog 12mysql数据库默认的端口是3306 默认账号 root 123SQL语言\t不区分大小写\t关键字建议大写 新建数据库 create datebase [数据库名] 删除数据库 drop datebase [数据库名] 修改数据库 略 查看数据库 肉眼看 3.表 12345678910-- 1.建表\t-- 语法: create table 表名(列名 数据类型,列名 数据类型);create table student(\tid int,\tname varchar(10),\tage int);-- 2.删表drop table student; 六、DML123456作用:实现表数据的增删改\tinsert\tdelete\tupdate\t#在MySql数据库中,字符串可以使用单引号或双引号表示 表12345create table student(\tid int,\tname varchar(10),\tage int); 1.增12345678910-- 数据中没有字符,单引号和双引号都表示字符串-- 增 -- 向表中的所有列新增数据\tinsert into student values(2,&#x27;王诛魔&#x27;,200);\t-- 给指定的列插入数据\tinsert into student(name,age) values(&#x27;李杀神&#x27;,300);\t-- 使用一条sql语句向表里面添加多行数据\tinsert into student values(4,&#x27;刘斩仙&#x27;,400),(5,&#x27;aaa&#x27;,600); 2.删12345678910111213-- 删delete from 表名 where 条件\t-- 删除id为1的行\tdelete from student where id=1;\t-- 删除name为刘斩仙的行\tdelete from student where name=&#x27;刘斩仙&#x27;;\t-- 多条件删除(删除name为刘斩仙并且age为100的行数据)\tdelete from student where name=&#x27;刘斩仙&#x27; and age=100;\t-- 删除name为王诛魔或者name为李杀神的行\tdelete from student where name=&#x27;王诛魔&#x27; or name=&#x27;李杀神&#x27;;\t-- 清空表数据\tdelete from student; 3.改12345678update 表名 set 列名=新值 where 条件-- 改\t-- 修改赵日天的年龄为200\tupdate student set age=200 where name=&#x27;赵日天&#x27;;\t-- 把刘斩仙的年龄在以前的基础上加20 update student set age=age+20 where name=&#x27;刘斩仙&#x27; and id=7;\t-- 修改id为4的name为赵日地,age为50\tupdate student set name=&#x27;赵日地&#x27;,age=50 where id=4; 七、MYSQL数据类型整数类型 浮点数类型 字符串类型 日期类型 其他数据类型 1、数值类 类型 说明 int(m) 整数 4个字节 范围(-2147483648~2147483647) bigint(m) 整数 8个字节 范围(+-9.22*10的18次方) float(m,d) 单精度浮点数8位精度 m总个数，d小数位 double(m,d) 双精度浮点数16位精度 m总个数，d小数位 decimal(m,d) 定点数 参数m&lt;65 是总个数，d&lt;30且 d&lt;m 是小数位 浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。 2、字符串类型 类型 说明 char(n) 固定长度，最多255个字符 varchar(n) 可变长度，最多65535个字符 tinytext 单可变长度，最多255个字符 text 可变长度，最多65535个字符 mediumtext 可变长度，最多2的24次方-1个字符 longtext 可变长度，最多2的32次方-1个字符 12345678910char 和 varchar：\t1.char(n)和varchar(n)中的n用来限制这一列能够插入的字符串的最大长度为n.\t1.char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以 char 类型存储的字符串末尾不能有空格，varchar 不限于此。\t2.char(n) 固定长度，char(4) 不管是存入几个字符，都将占用 4 个字符，varchar 是存入的实际字符数 +1 个字节（n&lt;=255）或2个字节(n&gt;255)，所以 varchar(4),存入 3 个字符将占用 4 个字节。MySQL 5.0 以上的版本：\t一个汉字占多少长度与编码有关：UTF－8：一个汉字＝3个字节GBK：一个汉字＝2个字节varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别 MySQL 检查长度，可用 SQL 语言来查看： 3、日期时间类型 类型 说明 date 日期 ‘2008-12-2’ time 时间 ‘12:25:36’ datetime 日期时间 ‘2008-12-2 22:06:44’ timestamp 自动存储记录修改时间 1若定义一个字段为timestamp，这个字段里的时间数据会随其他字段修改的时候自动刷新，所以这个数据类型的字段可以存放这条记录最后被修改的时间。 123456789101112131415161718create table student(\ts_id int,\ts_name varchar(10),\tgender varchar(10),\tage int,\theight double,\tweight double,\tbirthday date,\tid_card varchar(20),\tcreatetime datetime,\tupdatetime TIMESTAMP -- 时间戳,当我们对表的数据进行修改时,它会自动刷新);insert into student values(1,&#x27;赵昊&#x27;,&#x27;男&#x27;,20,180.5,62.5,&#x27;2020/10/01&#x27;,&#x27;111&#x27;,SYSDATE(),SYSDATE());insert into student values(2,&#x27;铁锤&#x27;,&#x27;女&#x27;,21,175.3,63.5,&#x27;2020/10/02&#x27;,&#x27;111&#x27;,SYSDATE(),SYSDATE());insert into student values(3,&#x27;山炮&#x27;,&#x27;女&#x27;,22,170.5,64.5,&#x27;2020/10/03&#x27;,&#x27;111&#x27;,SYSDATE(),SYSDATE());update student set id_card=&#x27;123&#x27; where s_name=&#x27;赵昊&#x27;; 12时间戳存储数据的最后修改时间,数据类型用时间戳,当我们对表数据进行修改时,这一列的时间会自动刷新"},{"path":"/2024/05/08/MYSQL高级进阶文档/","content":"一、组合查询12UNION和UNION ALL的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。前提条件:两张表列的数量要一致 12345678910111213141516create table student1(\ts_id varchar(10) primary key,\tname varchar(20));insert into student1 values(&#x27;001&#x27;,&#x27;范娜&#x27;),(&#x27;002&#x27;,&#x27;张三星&#x27;),(&#x27;003&#x27;,&#x27;李四海&#x27;),(&#x27;004&#x27;,&#x27;刘德华&#x27;),(&#x27;005&#x27;,&#x27;周润发&#x27;);create table student2(\ts_id varchar(10) primary key,\tname varchar(20));insert into student2 values(&#x27;001&#x27;,&#x27;范娜&#x27;),(&#x27;006&#x27;,&#x27;张学友&#x27;),(&#x27;007&#x27;,&#x27;喜羊羊&#x27;),(&#x27;008&#x27;,&#x27;灰太狼&#x27;),(&#x27;005&#x27;,&#x27;阿童木&#x27;); 二、视图 视图是一张虚拟表,是一个查询结果集 其结构和数据是建立在对表的查询基础上 视图中不存放数据。数据存放在视图所引用的原始表中 一个原始表，根据不同用户的不同需求，可以创建不同的视图。 创建视图的作用是方便查询，视图一般不用做更新数据 12345678910111213141516-- 视图看作一张虚拟的表,保存的是查询语句,视图不保存数据-- 视图的作用是为了简化查询sql语法: #创建视图语法\tCREATE VIEW 视图名 AS (&lt;SELECT 语句&gt;); -- 创建视图\tcreate view my_view as select * from stu where sid in(select sid from sc where cid=(select cid from course where cname=&#x27;语文&#x27;) and score&gt;=60); -- 查询视图\tselect * from my_view; -- 删除视图\tdrop view my_view; 五、索引1、索引简介12索引的建立可以极大的提高数据库的检索速度索引的创建比较耗时,并且索引会占用计算机的存储空间 2、索引分类a、普通索引 普通索引是最基本的索引，它没有任何限制，允许在定义索引的列中插入重复值和空值 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748SELECT count(*) FROM `village`;select * from village;select * from village where name=&#x27;银闸社区居委会&#x27;;-- 索引-- 作用:索引的建立可以极大的提高数据库的查询速度-- 了解:索引在创建的时候比较耗时,并且创建索引也会占用存储空间-- 索引的分类\t-- 普通索引\t-- 主键索引 -- 主键自带索引\t-- 唯一索引\t-- 组合索引-- 索引的用法:在查询的时候以有索引的列为条件进行查询,可以提高查询效率-- 普通索引的语法\t-- 创建索引 create index 索引名称 on 表名(列名) -- 查看表中的索引 SHOW INDEX FROM 表名 -- 删除索引 drop index 索引名 on 表名\t-- 查询索引show index from village;-- 创建索引create index name_index on village(name);-- 删除索引drop index name_index on village;-- 当我们以具有索引的列进行条件查询时,可以提高查询效率select * from village where name=&#x27;银闸社区居委会&#x27; and streetCode=&#x27;110101001&#x27;;-- 索引失效select * from village where streetCode=&#x27;110101001&#x27;;\t-- 索引失效select * from village where name like &#x27;%社区居&#x27;-- 主键自带索引,当我们以主键进行条件查询时,速度也非常快.-- 如果表的数据量非常大,怎么提高查询效率\t-- 给频繁查询的列创建索引-- 索引在什么时候失效\t-- 1.以or进行多条件查询时\t-- 2.使用like进行模糊查询%在前面时 b、唯一索引 索引列的值必须唯一，允许有空值，如果是组合索引，列值的组合必须唯一 c、主键索引主键索引是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值，一般是在创建表的时候指定主键，主键默认就是主键索引 d、组合索引多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用 六、事务事务又叫做TCL，全称是transaction control language，意思是事务控制语言。 事务的定义：组成一个业务的多条sql语句要么全部执行成功，要么全部执行失败，这就是事务 12345事务的特性: 原子性Atomicity：原子性指的是事务是一个不可分割的，看作一个整体。\t一致性Consistency：组成事物的多个sql语句要么全部执行成功,要么全部执行失败.\t隔离性Isolation：指的是一个事务的执行，不能被其他的事务所干扰。\t持久性Durability：事物对数据库的改变就是永久的。 提示：mysql中默认是自动提交事务，如果要自己控制事务需要关闭mysql的自动提交事务 打开自动提交事务：SET AUTOCOMMIT&#x3D;1 关闭自动提交事务：SET AUTOCOMMIT&#x3D;0 案例：使用事务完成转帐操作。 123456789101112131415161718192021222324252627282930313233343536-- 事物-- 一个业务中的一组sql语句,要么全部执行成功,要么全部执行失败-- 事物的特性:\t-- 原子性:组成一个事物的多条sql语句看作一个整体,不可分割\t-- 一致性:组成一个事物的多条sql语句要么全部成功,要么全部失败\t-- 隔离性:事物跟事物之间相互隔离,互不影响\t-- 持久性:数据的改变一定时永久的\t-- 事物编程create table bank(\tid int primary key auto_increment,\taccount varchar(20),\tmoney double);insert into bank(account,money) values(&#x27;1001&#x27;,1000);insert into bank(account,money) values(&#x27;1002&#x27;,1000);select * from bank;-- 开启自动提交 SET AUTOCOMMIT=1-- 关闭自动提交 SET AUTOCOMMIT=0-- 1.开启事物SET AUTOCOMMIT=0;-- 2.执行sql语句-- 1001给1002转账100元update bank set money=money-100 where account=&#x27;1001&#x27;;update bank set money=money+100 where account=&#x27;1002&#x27;;-- 3.如果sql语句都执行成功,则确认(提交)COMMIT;-- 4.如果sql语句没有全部执行成功,则撤销(回滚)ROLLBACK;-- 5.关闭事物SET AUTOCOMMIT=1; mysq中不能自动回滚需要手动判断发生错误然后手动回滚。 七、数据库三范式12范式:前人在表设计时的经验总结为了建立冗余较小,结果合理的数据库,我们需要遵循数据库的范式 范式是关系数据库理论的基础，也是我们在设计数据库结构过程中所要遵循的规则和指导方法。 分类:1NF 2NF 3NF BCNF 4NF 5NF DKNF 6NF。 常用范式: 1NF、 2NF、3NF 。 目的 ●减少冗余 ●减少异常(Delete， Update， Insert) ●让数据组织的更加和谐 **第一范式 (1NF):**强调的是列的原子性，即列不能够再分成其他几列。 **第二范式(2NF) :**首先要满足1NF，另外还需要包含两部分内容:一是表必须有一个主键;二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分或者非主键。 **第三范式(3NF) :**首先要满足2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在:非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。"},{"title":"MySql 初级进阶文档","path":"/2024/05/08/MYSQL初级进阶文档/","content":"一、表约束1、表约束表约束是为了保证表结构和表数据的完整性,我们需要用到表约束 名称 关键字 非空约束 NOT NULL 默认约束 DEFAULT 唯一约束 UNIQUE KEY(UK) 主键约束 PRIMARY KEY(PK) 外键约束 FOREIGN KEY(FK) 自动增长 AUTO_INCREMENT 检测约束 check 123456789101112131415161718192021222324#表约束\t#作用:为了保证表结构和表数据的完整性,我们需要用到表约束\t#1.主键约束\t#用来唯一标识每一行数据\t#作用:一个表只能有一个主键，主键约束确保了表中的行是唯一的\t#语法:primary key\t#主键的特点:不能为空,不能重复#2.自增长约束\t#作用:实现主键的自增长\t#语法:auto_increment#3.非空约束\t#语法:not null#4.唯一性约束\t#语法:unique#5.默认值约束\t#语法:default#6.检查约束\t#用来限定列可能的取值个数\t#语法check#7.外键约束\t#作用:用来限制外键只能填它关联的那个表的主键已经存在的数据\t#语法:foreign key(外键名) references 表名(主键名) 表约束一 123456-- 表约束\t-- 作用:为了保证表结构和表数据的完整性\t-- 1.非空约束 not null\t-- 2.唯一性约束 unique\t-- 3.默认值约束 default\t-- 4.检查约束 check 123456789create table student(\tid int,\tname varchar(10) not null, -- 非空约束\tid_card varchar(20) unique, -- 唯一约束\tweight double default 60, -- 默认值约束\tsex varchar(10) check(sex=&#x27;男&#x27; or sex=&#x27;女&#x27;) -- 检查约束);insert into student values(1,&#x27;赵日天&#x27;,&#x27;111&#x27;,80,&#x27;男&#x27;);insert into student(id,name,id_card) values(2,&#x27;王诛魔&#x27;,&#x27;112&#x27;); 表约束二 12345678910111213141516171819202122232425#5.主键约束\t#用来唯一标识每一行数据\t#作用:一个表只能有一个主键，主键约束确保了表中的行是唯一的\t#语法:primary key\t#主键的特点:不能为空,不能重复-- 5.主键约束\t#用来唯一标识每一行数据\t#作用:一个表只能有一个主键，主键约束确保了表中的行是唯一的\t#语法:primary key\t#主键的特点:不能为空,不能重复-- 6.自增长约束\t-- auto_increment\t-- 作用:实现主键自动增长create table student2(\tid int primary key auto_increment,-- 主键约束;自增长约束\tname varchar(10));insert into student2(name) values(&#x27;赵日天&#x27;);insert into student2 values(5,&#x27;王诛魔&#x27;);#6.自增长约束\t#作用:实现主键的自增长\t#语法:auto_increment 表约束三 1234567891011121314151617181920212223外键约束-- 外键约束\t-- 作用:外键只能关联到其它表的主键,并且只能填写它关联的主键已存在的数据create table class(\tid int primary key auto_increment,\tname varchar(10));insert into class(name) values(&#x27;一班&#x27;);insert into class(name) values(&#x27;二班&#x27;);insert into class(name) values(&#x27;三班&#x27;);insert into class(name) values(&#x27;四班&#x27;);create table student(\tid int primary key auto_increment,\tname varchar(10),\tclass_id int,\tforeign key(class_id) references class(id));insert into student(name,class_id) values(&#x27;赵日天&#x27;,1);insert into student(name,class_id) values(&#x27;李杀神&#x27;,1);insert into student(name,class_id) values(&#x27;刘斩仙&#x27;,2);insert into student(name,class_id) values(&#x27;王诛魔&#x27;,3); 二、DQL123数据查询语言\tSELECT 作用是把数据库表里面的数据查询出来 1、运算符123456789101112131415161718192021222324252627282930313233343536373839-- DQL\tselect#1.算术运算符 +-*/%select 1+1;select 1-1;select 1*1;select 3/2;select 3%2;#2.关系运算符\t#关系运算符的结果为真(用数字1表示)或者假(用数字0表示假)\t#&gt; &gt;= &lt; &lt;= = !=\tselect 2&gt;1;\tselect 2&lt;1;\tselect 2=2;\tselect 2!=2;\t#between... and...\tselect 5 between 1 and 10; #like#判断李杀神是否姓李\tselect &#x27;李杀神&#x27; like &#x27;李%&#x27;;#判断李杀神是否以神结尾\tselect &#x27;李杀神&#x27; like &#x27;%神&#x27;;#判断李杀神中是否包含杀\tselect &#x27;李杀神&#x27; like &#x27;%杀%&#x27;;#空判断\tselect &#x27;&#x27;=&#x27;&#x27;;\tselect null is null;#3.逻辑运算符\t#结果：真（1） 假（0）\t#与\tandselect 1 and 1;\t#或 orselect 0 or 0;\t#非 notselect not 0; 12语法\tSELECT 列名,列名... FROM 表名 WHERE 条件 2、基本查询12345678910111213141516171819202122232425262728293031323334353637383940414243444546create table employee(\tid int primary key auto_increment,\tname VARCHAR(100),\tage int,\tsalary int);insert into employee values(1,&#x27;赵日天&#x27;,23,6000);insert into employee values(2,&#x27;李杀神&#x27;,24,4500);insert into employee values(3,&#x27;王诛魔&#x27;,20,5000);insert into employee values(4,&#x27;刘斩仙&#x27;,30,30000);insert into employee values(5,&#x27;&#x27;,29,15000);insert into employee values(6,null,35,40000);insert into employee values(7,&#x27;刘斩仙&#x27;,30,30000);-- 语法 select 列名...... from 表名 where 条件-- 1查询所有信息select * from employee;-- 2只查询出所有人的姓名select name from employee;-- 3只查询出所有人的姓名,并给列名取中文别名select name as &#x27;姓名&#x27; from employee;-- 4查询出所有人的姓名和薪资select name,salary from employee;-- 5查询出所有人的姓名和薪资-1000select name,salary-1000 from employee;-- 6查询出所有人的姓名和薪资-1000并且年龄加10select name,salary-1000,age+10 from employee;-- 7查询薪资大于5000的所有信息select * from employee where salary&gt;5000;-- 8查询薪资在2000和5000之间 (两种方式)\t-- 方式一select * from employee where salary&gt;=2000 and salary&lt;=5000;\t-- 方式二select * from employee where salary between 2000 and 5000;-- 9查询姓名为空字符串select * from employee where name=&#x27;&#x27;;-- 10查询姓名为nullselect * from employee where name is null;-- 11查询姓名包含神字的select * from employee where name like &#x27;%神%&#x27;;-- 12 查询赵日天的所有信息，查询的结果把赵日天的薪资加1000select id,name,age,salary+1000 from employee where name=&#x27;赵日天&#x27;;"},{"title":"Hello World","path":"/2024/05/08/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]